import json
import streamlit as st

class TrainingApp:
    def __init__(self, json_file):
        self.json_file = json_file
        self.questions = self.load_questions()
        self.current_question_index = 0
        self.correct_answers = 0
        self.total_questions = len(self.questions)

    def load_questions(self):
        with open(self.json_file, 'r', encoding='utf-8') as file:
            questions = json.load(file)
        return questions

    def start_training(self, selected_topic):
        self.questions = [q for q in self.questions if q['topic'] == selected_topic]
        self.total_questions = len(self.questions)
        self.current_question_index = 0
        self.correct_answers = 0

    def get_current_question(self):
        if self.current_question_index < self.total_questions:
            return self.questions[self.current_question_index]
        else:
            return None

    def submit_answer(self, user_answer):
        correct_answer = self.questions[self.current_question_index]['correct_answer']
        is_correct = user_answer == correct_answer
        if is_correct:
            self.correct_answers += 1
        self.current_question_index += 1
        return correct_answer, is_correct

    def get_results(self):
        return f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {self.correct_answers} –∏–∑ {self.total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤."

# Streamlit app
st.set_page_config(page_title="Training App", page_icon="üìò")
st.title("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞")

if 'app_state' not in st.session_state:
    st.session_state.app_state = TrainingApp('questions_85_complete.json')

app = st.session_state.app_state

# –í—ã–±–æ—Ä —Ç–µ–º—ã
topics = list(set(q['topic'] for q in app.questions))
selected_topic = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", topics)

if selected_topic and st.button("–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"):
    app.start_training(selected_topic)

question_data = app.get_current_question()
if question_data:
    st.write(f"### –í–æ–ø—Ä–æ—Å: {question_data['question']}")
    user_answer = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", question_data['options'], key=f"q_{app.current_question_index}")
    if st.button("–û—Ç–≤–µ—Ç–∏—Ç—å", key=f"submit_{app.current_question_index}"):
        correct_answer, is_correct = app.submit_answer(user_answer)
        if is_correct:
            st.write(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
        else:
            st.write(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
        if app.current_question_index < app.total_questions:
            if  st.button("–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"):
                st.experimental_rerun()()
        else:
            st.write(app.get_results())
else:
    if app.current_question_index >= app.total_questions:
        st.write(app.get_results())
    else:
        st.write("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")